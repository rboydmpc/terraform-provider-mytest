// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ZoneCreateConfigType string

const (
	ZoneCreateConfigTypeZoneVcenterConfig ZoneCreateConfigType = "zoneVcenterConfig"
	ZoneCreateConfigTypeZoneAwsConfig     ZoneCreateConfigType = "zoneAwsConfig"
	ZoneCreateConfigTypeZoneAzureConfig   ZoneCreateConfigType = "zoneAzureConfig"
	ZoneCreateConfigTypeZoneGcpConfig     ZoneCreateConfigType = "zoneGcpConfig"
)

type ZoneCreateConfig struct {
	ZoneVcenterConfig *ZoneVcenterConfig
	ZoneAwsConfig     *ZoneAwsConfig
	ZoneAzureConfig   *ZoneAzureConfig
	ZoneGcpConfig     *ZoneGcpConfig

	Type ZoneCreateConfigType
}

func CreateZoneCreateConfigZoneVcenterConfig(zoneVcenterConfig ZoneVcenterConfig) ZoneCreateConfig {
	typ := ZoneCreateConfigTypeZoneVcenterConfig

	return ZoneCreateConfig{
		ZoneVcenterConfig: &zoneVcenterConfig,
		Type:              typ,
	}
}

func CreateZoneCreateConfigZoneAwsConfig(zoneAwsConfig ZoneAwsConfig) ZoneCreateConfig {
	typ := ZoneCreateConfigTypeZoneAwsConfig

	return ZoneCreateConfig{
		ZoneAwsConfig: &zoneAwsConfig,
		Type:          typ,
	}
}

func CreateZoneCreateConfigZoneAzureConfig(zoneAzureConfig ZoneAzureConfig) ZoneCreateConfig {
	typ := ZoneCreateConfigTypeZoneAzureConfig

	return ZoneCreateConfig{
		ZoneAzureConfig: &zoneAzureConfig,
		Type:            typ,
	}
}

func CreateZoneCreateConfigZoneGcpConfig(zoneGcpConfig ZoneGcpConfig) ZoneCreateConfig {
	typ := ZoneCreateConfigTypeZoneGcpConfig

	return ZoneCreateConfig{
		ZoneGcpConfig: &zoneGcpConfig,
		Type:          typ,
	}
}

func (u *ZoneCreateConfig) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	zoneVcenterConfig := new(ZoneVcenterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneVcenterConfig); err == nil {
		u.ZoneVcenterConfig = zoneVcenterConfig
		u.Type = ZoneCreateConfigTypeZoneVcenterConfig
		return nil
	}

	zoneAwsConfig := new(ZoneAwsConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneAwsConfig); err == nil {
		u.ZoneAwsConfig = zoneAwsConfig
		u.Type = ZoneCreateConfigTypeZoneAwsConfig
		return nil
	}

	zoneAzureConfig := new(ZoneAzureConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneAzureConfig); err == nil {
		u.ZoneAzureConfig = zoneAzureConfig
		u.Type = ZoneCreateConfigTypeZoneAzureConfig
		return nil
	}

	zoneGcpConfig := new(ZoneGcpConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneGcpConfig); err == nil {
		u.ZoneGcpConfig = zoneGcpConfig
		u.Type = ZoneCreateConfigTypeZoneGcpConfig
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ZoneCreateConfig) MarshalJSON() ([]byte, error) {
	if u.ZoneVcenterConfig != nil {
		return json.Marshal(u.ZoneVcenterConfig)
	}

	if u.ZoneAwsConfig != nil {
		return json.Marshal(u.ZoneAwsConfig)
	}

	if u.ZoneAzureConfig != nil {
		return json.Marshal(u.ZoneAzureConfig)
	}

	if u.ZoneGcpConfig != nil {
		return json.Marshal(u.ZoneGcpConfig)
	}

	return nil, nil
}

// ZoneCreateCredential - Map containing Credential ID. Setting `type` to `local` means use the values set in the local cloud config instead of associating a credential.
type ZoneCreateCredential struct {
	Type *string `json:"type,omitempty"`
}

// ZoneCreateVisibility - private or public
type ZoneCreateVisibility string

const (
	ZoneCreateVisibilityPrivate ZoneCreateVisibility = "private"
	ZoneCreateVisibilityPublic  ZoneCreateVisibility = "public"
)

func (e ZoneCreateVisibility) ToPointer() *ZoneCreateVisibility {
	return &e
}

func (e *ZoneCreateVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public":
		*e = ZoneCreateVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ZoneCreateVisibility: %v", v)
	}
}

// ZoneCreateZoneType - Map containing the Cloud (zone) code name. See the zone-types API to fetch a list of all available Cloud (zone) types and their codes.
type ZoneCreateZoneType struct {
	Code *string `json:"code,omitempty"`
}

type ZoneCreate struct {
	// Specifies which Tenant this cloud should be assigned to
	AccountID *int64 `json:"accountId,omitempty"`
	// Automatically Power on VMs
	AutoRecoverPowerState *bool `json:"autoRecoverPowerState,omitempty"`
	// Optional code for use with policies
	Code   *string           `json:"code,omitempty"`
	Config *ZoneCreateConfig `json:"config,omitempty"`
	// Map containing Credential ID. Setting `type` to `local` means use the values set in the local cloud config instead of associating a credential.
	Credential *ZoneCreateCredential `json:"credential,omitempty"`
	// Optional description field if you want to put more info there
	Description *string `json:"description,omitempty"`
	// Can be used to disable the cloud
	Enabled *bool `json:"enabled,omitempty"`
	// Specifies which Server group this cloud should be assigned to
	GroupID int64 `json:"groupId"`
	// Linked Account ID (enter commercial ID to get costing for AWS Govcloud)
	LinkedAccountID *int64 `json:"linkedAccountId,omitempty"`
	// Optional location for your cloud
	Location *string `json:"location,omitempty"`
	// A unique name scoped to your account for the cloud
	Name string `json:"name"`
	// Scale Priority
	ScalePriority *int64 `json:"scalePriority,omitempty"`
	// host firewall. `off` or `internal`. a.k.a. "local firewall"
	SecurityMode *string `json:"securityMode,omitempty"`
	// private or public
	Visibility *ZoneCreateVisibility `json:"visibility,omitempty"`
	// Map containing the Cloud (zone) code name. See the zone-types API to fetch a list of all available Cloud (zone) types and their codes.
	ZoneType ZoneCreateZoneType `json:"zoneType"`
}
