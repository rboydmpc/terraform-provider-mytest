// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"time"
)

type ZoneAccount struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ZoneConfigNetworkServer struct {
	ID *string `json:"id,omitempty"`
}

type ZoneConfig struct {
	EnableNetworkTypeSelection *string                  `json:"_enableNetworkTypeSelection,omitempty"`
	UseHostCredentials         *string                  `json:"_useHostCredentials,omitempty"`
	AccessKey                  *string                  `json:"accessKey,omitempty"`
	AccountType                *string                  `json:"accountType,omitempty"`
	APIURL                     *string                  `json:"apiUrl,omitempty"`
	APIVersion                 *string                  `json:"apiVersion,omitempty"`
	ApplianceURL               *string                  `json:"applianceUrl,omitempty"`
	AzureCostingMode           *string                  `json:"azureCostingMode,omitempty"`
	BackupMode                 *string                  `json:"backupMode,omitempty"`
	CertificateProvider        *string                  `json:"certificateProvider,omitempty"`
	ClientEmail                *string                  `json:"clientEmail,omitempty"`
	ClientID                   *string                  `json:"clientId,omitempty"`
	ClientSecret               *string                  `json:"clientSecret,omitempty"`
	ClientSecretHash           *string                  `json:"clientSecretHash,omitempty"`
	CloudType                  *string                  `json:"cloudType,omitempty"`
	Cluster                    *string                  `json:"cluster,omitempty"`
	ConfigCmID                 *string                  `json:"configCmId,omitempty"`
	ConfigCmdbDiscovery        *bool                    `json:"configCmdbDiscovery,omitempty"`
	ConfigCmdbID               *string                  `json:"configCmdbId,omitempty"`
	ConfigManagementID         *string                  `json:"configManagementId,omitempty"`
	CostingAccessKey           *string                  `json:"costingAccessKey,omitempty"`
	CostingBucket              *string                  `json:"costingBucket,omitempty"`
	CostingBucketName          *string                  `json:"costingBucketName,omitempty"`
	CostingFolder              *string                  `json:"costingFolder,omitempty"`
	CostingRegion              *string                  `json:"costingRegion,omitempty"`
	CostingReport              *string                  `json:"costingReport,omitempty"`
	CostingReportName          *string                  `json:"costingReportName,omitempty"`
	CostingSecretKey           *string                  `json:"costingSecretKey,omitempty"`
	CostingSecretKeyHash       *string                  `json:"costingSecretKeyHash,omitempty"`
	CspClientID                *string                  `json:"cspClientId,omitempty"`
	CspClientSecret            *string                  `json:"cspClientSecret,omitempty"`
	CspClientSecretHash        *string                  `json:"cspClientSecretHash,omitempty"`
	CspCustomer                *string                  `json:"cspCustomer,omitempty"`
	CspTenantID                *string                  `json:"cspTenantId,omitempty"`
	Datacenter                 *string                  `json:"datacenter,omitempty"`
	DatacenterID               *string                  `json:"datacenterId,omitempty"`
	DatacenterName             *string                  `json:"datacenterName,omitempty"`
	DiskEncryption             *string                  `json:"diskEncryption,omitempty"`
	DiskStorageType            *string                  `json:"diskStorageType,omitempty"`
	DistributedWorkerID        *string                  `json:"distributedWorkerId,omitempty"`
	DNSIntegrationID           *string                  `json:"dnsIntegrationId,omitempty"`
	EbsEncryption              *string                  `json:"ebsEncryption,omitempty"`
	EnableDiskTypeSelection    *string                  `json:"enableDiskTypeSelection,omitempty"`
	EnableVnc                  *string                  `json:"enableVnc,omitempty"`
	EncryptionSet              *string                  `json:"encryptionSet,omitempty"`
	Endpoint                   *string                  `json:"endpoint,omitempty"`
	GoogleRegionID             *string                  `json:"googleRegionId,omitempty"`
	HideHostSelection          *string                  `json:"hideHostSelection,omitempty"`
	ImageStoreID               *string                  `json:"imageStoreId,omitempty"`
	ImportExisting             *string                  `json:"importExisting,omitempty"`
	InventoryLevel             *string                  `json:"inventoryLevel,omitempty"`
	IsVpc                      *string                  `json:"isVpc,omitempty"`
	KubeURL                    *string                  `json:"kubeUrl,omitempty"`
	NetworkServer              *ZoneConfigNetworkServer `json:"networkServer,omitempty"`
	NetworkServerID            *string                  `json:"networkServer.id,omitempty"`
	Password                   *string                  `json:"password,omitempty"`
	PasswordHash               *string                  `json:"passwordHash,omitempty"`
	PrivateKey                 *string                  `json:"privateKey,omitempty"`
	PrivateKeyHash             *string                  `json:"privateKeyHash,omitempty"`
	ProjectID                  *string                  `json:"projectId,omitempty"`
	ReplicationMode            *string                  `json:"replicationMode,omitempty"`
	ResourceGroup              *string                  `json:"resourceGroup,omitempty"`
	ResourcePool               *string                  `json:"resourcePool,omitempty"`
	ResourcePoolID             *string                  `json:"resourcePoolId,omitempty"`
	RPCMode                    *string                  `json:"rpcMode,omitempty"`
	SecretKey                  *string                  `json:"secretKey,omitempty"`
	SecretKeyHash              *string                  `json:"secretKeyHash,omitempty"`
	SecurityMode               *string                  `json:"securityMode,omitempty"`
	SecurityServer             *string                  `json:"securityServer,omitempty"`
	ServiceRegistryID          *string                  `json:"serviceRegistryId,omitempty"`
	StsAssumeRole              *string                  `json:"stsAssumeRole,omitempty"`
	SubscriberID               *string                  `json:"subscriberId,omitempty"`
	TenantID                   *string                  `json:"tenantId,omitempty"`
	Username                   *string                  `json:"username,omitempty"`
	Vpc                        *string                  `json:"vpc,omitempty"`
}

type ZoneCredential2 struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

type ZoneCredential1 struct {
	Type *string `json:"type,omitempty"`
}

type ZoneCredentialType string

const (
	ZoneCredentialTypeZoneCredential1 ZoneCredentialType = "zone_credential_1"
	ZoneCredentialTypeZoneCredential2 ZoneCredentialType = "zone_credential_2"
)

type ZoneCredential struct {
	ZoneCredential1 *ZoneCredential1
	ZoneCredential2 *ZoneCredential2

	Type ZoneCredentialType
}

func CreateZoneCredentialZoneCredential1(zoneCredential1 ZoneCredential1) ZoneCredential {
	typ := ZoneCredentialTypeZoneCredential1

	return ZoneCredential{
		ZoneCredential1: &zoneCredential1,
		Type:            typ,
	}
}

func CreateZoneCredentialZoneCredential2(zoneCredential2 ZoneCredential2) ZoneCredential {
	typ := ZoneCredentialTypeZoneCredential2

	return ZoneCredential{
		ZoneCredential2: &zoneCredential2,
		Type:            typ,
	}
}

func (u *ZoneCredential) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	zoneCredential1 := new(ZoneCredential1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneCredential1); err == nil {
		u.ZoneCredential1 = zoneCredential1
		u.Type = ZoneCredentialTypeZoneCredential1
		return nil
	}

	zoneCredential2 := new(ZoneCredential2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneCredential2); err == nil {
		u.ZoneCredential2 = zoneCredential2
		u.Type = ZoneCredentialTypeZoneCredential2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ZoneCredential) MarshalJSON() ([]byte, error) {
	if u.ZoneCredential1 != nil {
		return json.Marshal(u.ZoneCredential1)
	}

	if u.ZoneCredential2 != nil {
		return json.Marshal(u.ZoneCredential2)
	}

	return nil, nil
}

type ZoneGroups struct {
	AccountID *int64  `json:"accountId,omitempty"`
	ID        *int64  `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
}

type ZoneNetworkDomain struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ZoneNetworkServer struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ZoneOwner struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ZoneSecurityServer struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ZoneStatsServerCounts struct {
	All           *int64 `json:"all,omitempty"`
	Baremetal     *int64 `json:"baremetal,omitempty"`
	ContainerHost *int64 `json:"containerHost,omitempty"`
	Host          *int64 `json:"host,omitempty"`
	Hypervisor    *int64 `json:"hypervisor,omitempty"`
	Unmanaged     *int64 `json:"unmanaged,omitempty"`
	VM            *int64 `json:"vm,omitempty"`
}

type ZoneStats struct {
	ServerCounts *ZoneStatsServerCounts `json:"serverCounts,omitempty"`
}

type ZoneZoneType struct {
	Code *string `json:"code,omitempty"`
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type Zone struct {
	Account               *ZoneAccount    `json:"account,omitempty"`
	AccountID             *int64          `json:"accountId,omitempty"`
	AgentMode             *string         `json:"agentMode,omitempty"`
	APIProxy              *string         `json:"apiProxy,omitempty"`
	AutoRecoverPowerState *bool           `json:"autoRecoverPowerState,omitempty"`
	Code                  *string         `json:"code,omitempty"`
	Config                *ZoneConfig     `json:"config,omitempty"`
	ConsoleKeymap         *string         `json:"consoleKeymap,omitempty"`
	ContainerMode         *string         `json:"containerMode,omitempty"`
	CostLastSync          *time.Time      `json:"costLastSync,omitempty"`
	CostLastSyncDuration  *int64          `json:"costLastSyncDuration,omitempty"`
	CostStatus            *string         `json:"costStatus,omitempty"`
	CostStatusDate        *time.Time      `json:"costStatusDate,omitempty"`
	CostStatusMessage     *string         `json:"costStatusMessage,omitempty"`
	CostingMode           *string         `json:"costingMode,omitempty"`
	Credential            *ZoneCredential `json:"credential,omitempty"`
	// Dark logo image URL
	DarkImagePath *string      `json:"darkImagePath,omitempty"`
	DateCreated   *time.Time   `json:"dateCreated,omitempty"`
	DomainName    *string      `json:"domainName,omitempty"`
	Enabled       *bool        `json:"enabled,omitempty"`
	ExternalID    *string      `json:"externalId,omitempty"`
	Groups        []ZoneGroups `json:"groups,omitempty"`
	GuidanceMode  *string      `json:"guidanceMode,omitempty"`
	ID            *int64       `json:"id,omitempty"`
	// Logo image URL
	ImagePath         *string             `json:"imagePath,omitempty"`
	InventoryLevel    *string             `json:"inventoryLevel,omitempty"`
	LastSync          *time.Time          `json:"lastSync,omitempty"`
	LastSyncDuration  *int64              `json:"lastSyncDuration,omitempty"`
	LastUpdated       *time.Time          `json:"lastUpdated,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Name              *string             `json:"name,omitempty"`
	NetworkDomain     *ZoneNetworkDomain  `json:"networkDomain,omitempty"`
	NetworkServer     *ZoneNetworkServer  `json:"networkServer,omitempty"`
	NextRunDate       *time.Time          `json:"nextRunDate,omitempty"`
	Owner             *ZoneOwner          `json:"owner,omitempty"`
	ProvisioningProxy *string             `json:"provisioningProxy,omitempty"`
	RegionCode        *string             `json:"regionCode,omitempty"`
	ScalePriority     *int64              `json:"scalePriority,omitempty"`
	SecurityMode      *string             `json:"securityMode,omitempty"`
	SecurityServer    *ZoneSecurityServer `json:"securityServer,omitempty"`
	ServerCount       *int64              `json:"serverCount,omitempty"`
	ServiceVersion    *string             `json:"serviceVersion,omitempty"`
	Stats             *ZoneStats          `json:"stats,omitempty"`
	Status            *string             `json:"status,omitempty"`
	StatusDate        *time.Time          `json:"statusDate,omitempty"`
	StatusMessage     *string             `json:"statusMessage,omitempty"`
	StorageMode       *string             `json:"storageMode,omitempty"`
	Timezone          *string             `json:"timezone,omitempty"`
	UserDataLinux     *string             `json:"userDataLinux,omitempty"`
	UserDataWindows   *string             `json:"userDataWindows,omitempty"`
	UUID              *string             `json:"uuid,omitempty"`
	Visibility        *string             `json:"visibility,omitempty"`
	ZoneType          *ZoneZoneType       `json:"zoneType,omitempty"`
	ZoneTypeID        *int64              `json:"zoneTypeId,omitempty"`
}
