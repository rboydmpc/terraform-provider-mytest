// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"MyTest/internal/sdk"
	"MyTest/internal/sdk/pkg/models/operations"
	"context"
	"fmt"

	"MyTest/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ZoneResource{}
var _ resource.ResourceWithImportState = &ZoneResource{}

func NewZoneResource() resource.Resource {
	return &ZoneResource{}
}

// ZoneResource defines the resource implementation.
type ZoneResource struct {
	client *sdk.MyTest
}

// ZoneResourceModel describes the resource data model.
type ZoneResourceModel struct {
	Account               *ZoneAccount       `tfsdk:"account"`
	AccountID             types.Int64        `tfsdk:"account_id"`
	AgentMode             types.String       `tfsdk:"agent_mode"`
	APIProxy              types.String       `tfsdk:"api_proxy"`
	AutoRecoverPowerState types.Bool         `tfsdk:"auto_recover_power_state"`
	Code                  types.String       `tfsdk:"code"`
	Config                *ZoneVcenterConfig `tfsdk:"config"`
	ConsoleKeymap         types.String       `tfsdk:"console_keymap"`
	ContainerMode         types.String       `tfsdk:"container_mode"`
	CostingMode           types.String       `tfsdk:"costing_mode"`
	CostLastSync          types.String       `tfsdk:"cost_last_sync"`
	CostLastSyncDuration  types.Int64        `tfsdk:"cost_last_sync_duration"`
	CostStatus            types.String       `tfsdk:"cost_status"`
	CostStatusDate        types.String       `tfsdk:"cost_status_date"`
	CostStatusMessage     types.String       `tfsdk:"cost_status_message"`
	Credential            *ZoneCredential    `tfsdk:"credential"`
	DarkImagePath         types.String       `tfsdk:"dark_image_path"`
	DateCreated           types.String       `tfsdk:"date_created"`
	Description           types.String       `tfsdk:"description"`
	DomainName            types.String       `tfsdk:"domain_name"`
	Enabled               types.Bool         `tfsdk:"enabled"`
	ExternalID            types.String       `tfsdk:"external_id"`
	GroupID               types.Int64        `tfsdk:"group_id"`
	Groups                []ZoneGroups       `tfsdk:"groups"`
	GuidanceMode          types.String       `tfsdk:"guidance_mode"`
	ID                    types.Int64        `tfsdk:"id"`
	ImagePath             types.String       `tfsdk:"image_path"`
	InventoryLevel        types.String       `tfsdk:"inventory_level"`
	LastSync              types.String       `tfsdk:"last_sync"`
	LastSyncDuration      types.Int64        `tfsdk:"last_sync_duration"`
	LastUpdated           types.String       `tfsdk:"last_updated"`
	LinkedAccountID       types.Int64        `tfsdk:"linked_account_id"`
	Location              types.String       `tfsdk:"location"`
	Name                  types.String       `tfsdk:"name"`
	NetworkDomain         *ZoneAccount       `tfsdk:"network_domain"`
	NetworkServer         *ZoneAccount       `tfsdk:"network_server"`
	NextRunDate           types.String       `tfsdk:"next_run_date"`
	Owner                 *ZoneAccount       `tfsdk:"owner"`
	ProvisioningProxy     types.String       `tfsdk:"provisioning_proxy"`
	RegionCode            types.String       `tfsdk:"region_code"`
	ScalePriority         types.Int64        `tfsdk:"scale_priority"`
	SecurityMode          types.String       `tfsdk:"security_mode"`
	SecurityServer        *ZoneAccount       `tfsdk:"security_server"`
	ServerCount           types.Int64        `tfsdk:"server_count"`
	ServiceVersion        types.String       `tfsdk:"service_version"`
	Stats                 *ZoneStats         `tfsdk:"stats"`
	Status                types.String       `tfsdk:"status"`
	StatusDate            types.String       `tfsdk:"status_date"`
	StatusMessage         types.String       `tfsdk:"status_message"`
	StorageMode           types.String       `tfsdk:"storage_mode"`
	Success               types.Bool         `tfsdk:"success"`
	Timezone              types.String       `tfsdk:"timezone"`
	UserDataLinux         types.String       `tfsdk:"user_data_linux"`
	UserDataWindows       types.String       `tfsdk:"user_data_windows"`
	UUID                  types.String       `tfsdk:"uuid"`
	Visibility            types.String       `tfsdk:"visibility"`
	ZoneType              *ZoneZoneType      `tfsdk:"zone_type"`
	ZoneTypeID            types.Int64        `tfsdk:"zone_type_id"`
}

func (r *ZoneResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_zone"
}

func (r *ZoneResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Zone Resource",

		Attributes: map[string]schema.Attribute{
			"account": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"account_id": schema.Int64Attribute{
				Computed: true,
				Optional: true,
			},
			"agent_mode": schema.StringAttribute{
				Computed: true,
			},
			"api_proxy": schema.StringAttribute{
				Computed: true,
			},
			"auto_recover_power_state": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"code": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"enable_network_type_selection": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"api_url": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"api_version": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"appliance_url": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"backup_mode": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"certificate_provider": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"cluster": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"config_cmdb_discovery": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"config_cmdb_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"config_cm_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"config_management_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"datacenter": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"datacenter_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"datacenter_name": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"disk_storage_type": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"distributed_worker_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"dns_integration_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"enable_disk_type_selection": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"enable_vnc": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"hide_host_selection": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"import_existing": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"kube_url": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"network_server": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
						},
					},
					"network_server_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"password": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"password_hash": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"replication_mode": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"resource_pool": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"resource_pool_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"rpc_mode": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"security_mode": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"security_server": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"service_registry_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"username": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
			},
			"console_keymap": schema.StringAttribute{
				Computed: true,
			},
			"container_mode": schema.StringAttribute{
				Computed: true,
			},
			"costing_mode": schema.StringAttribute{
				Computed: true,
			},
			"cost_last_sync": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"cost_last_sync_duration": schema.Int64Attribute{
				Computed: true,
			},
			"cost_status": schema.StringAttribute{
				Computed: true,
			},
			"cost_status_date": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"cost_status_message": schema.StringAttribute{
				Computed: true,
			},
			"credential": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `Map containing Credential ID. Setting ` + "`" + `type` + "`" + ` to ` + "`" + `local` + "`" + ` means use the values set in the local cloud config instead of associating a credential.`,
			},
			"dark_image_path": schema.StringAttribute{
				Computed:    true,
				Description: `Dark logo image URL`,
			},
			"date_created": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"description": schema.StringAttribute{
				Optional:    true,
				Description: `Optional description field if you want to put more info there`,
			},
			"domain_name": schema.StringAttribute{
				Computed: true,
			},
			"enabled": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"external_id": schema.StringAttribute{
				Computed: true,
			},
			"group_id": schema.Int64Attribute{
				Required:    true,
				Description: `Specifies which Server group this cloud should be assigned to`,
			},
			"groups": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"account_id": schema.Int64Attribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"guidance_mode": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.Int64Attribute{
				Computed: true,
			},
			"image_path": schema.StringAttribute{
				Computed:    true,
				Description: `Logo image URL`,
			},
			"inventory_level": schema.StringAttribute{
				Computed: true,
			},
			"last_sync": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"last_sync_duration": schema.Int64Attribute{
				Computed: true,
			},
			"last_updated": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"linked_account_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Linked Account ID (enter commercial ID to get costing for AWS Govcloud)`,
			},
			"location": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"network_domain": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"network_server": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"next_run_date": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"owner": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"provisioning_proxy": schema.StringAttribute{
				Computed: true,
			},
			"region_code": schema.StringAttribute{
				Computed: true,
			},
			"scale_priority": schema.Int64Attribute{
				Computed: true,
				Optional: true,
			},
			"security_mode": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"security_server": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"server_count": schema.Int64Attribute{
				Computed: true,
			},
			"service_version": schema.StringAttribute{
				Computed: true,
			},
			"stats": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"server_counts": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"all": schema.Int64Attribute{
								Computed: true,
							},
							"baremetal": schema.Int64Attribute{
								Computed: true,
							},
							"container_host": schema.Int64Attribute{
								Computed: true,
							},
							"host": schema.Int64Attribute{
								Computed: true,
							},
							"hypervisor": schema.Int64Attribute{
								Computed: true,
							},
							"unmanaged": schema.Int64Attribute{
								Computed: true,
							},
							"vm": schema.Int64Attribute{
								Computed: true,
							},
						},
					},
				},
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"status_date": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"status_message": schema.StringAttribute{
				Computed: true,
			},
			"storage_mode": schema.StringAttribute{
				Computed: true,
			},
			"success": schema.BoolAttribute{
				Computed: true,
			},
			"timezone": schema.StringAttribute{
				Computed: true,
			},
			"user_data_linux": schema.StringAttribute{
				Computed: true,
			},
			"user_data_windows": schema.StringAttribute{
				Computed: true,
			},
			"uuid": schema.StringAttribute{
				Computed: true,
			},
			"visibility": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"zone_type": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"code": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `Map containing the Cloud (zone) code name. See the zone-types API to fetch a list of all available Cloud (zone) types and their codes.`,
			},
			"zone_type_id": schema.Int64Attribute{
				Computed: true,
			},
		},
	}
}

func (r *ZoneResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.MyTest)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.MyTest, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ZoneResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ZoneResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	zone := *data.ToCreateSDKType()
	request := operations.AddCloudsRequestBody{
		Zone: zone,
	}
	res, err := r.client.Clouds.AddClouds(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AddClouds200ApplicationJSONObject == nil || res.AddClouds200ApplicationJSONObject.Zone == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.AddClouds200ApplicationJSONObject.Zone)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ZoneResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ZoneResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueInt64()
	request := operations.GetCloudsRequest{
		ID: id,
	}
	res, err := r.client.Clouds.GetClouds(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.GetClouds200ApplicationJSONObject == nil || res.GetClouds200ApplicationJSONObject.Zone == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.GetClouds200ApplicationJSONObject.Zone)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ZoneResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ZoneResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var requestBody *operations.UpdateCloudsRequestBody
	zone := *data.ToUpdateSDKType()
	requestBody = &operations.UpdateCloudsRequestBody{
		Zone: zone,
	}
	id := data.ID.ValueInt64()
	request := operations.UpdateCloudsRequest{
		RequestBody: requestBody,
		ID:          id,
	}
	res, err := r.client.Clouds.UpdateClouds(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.UpdateClouds200ApplicationJSONObject == nil || res.UpdateClouds200ApplicationJSONObject.Zone == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.UpdateClouds200ApplicationJSONObject.Zone)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ZoneResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ZoneResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueInt64()
	request := operations.RemoveCloudsRequest{
		ID: id,
	}
	res, err := r.client.Clouds.RemoveClouds(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ZoneResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
